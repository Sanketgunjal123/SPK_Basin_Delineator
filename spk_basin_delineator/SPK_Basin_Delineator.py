# -*- coding: utf-8 -*-
"""
/***************************************************************************
 spkbasindelineator
                                 A QGIS plugin
 This plugin will delineate basins for the proposed area
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-16
        git sha              : $Format:%H$
        copyright            : (C) 2021 by SPK HydroTech
        email                : spkhydrotech@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.           
    
*  This file is part of SPK Basi Delineator.

*  SPK Basi Delineator is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.

*  SPK Basi Delineator is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.

*  You should have received a copy of the GNU General Public License
*  along with SPK Basi Delineator.  If not, see <https://www.gnu.org/licenses/>.                        *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QProgressBar
from qgis.PyQt.QtWidgets import *
from qgis.core import QgsProject, QgsCoordinateReferenceSystem
import processing,tempfile

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .SPK_Basin_Delineator_dialog import spkbasindelineatorDialog
import os.path


class spkbasindelineator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'spkbasindelineator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SPK Basin Delineator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('spkbasindelineator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/SPK_Basin_Delineator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Delineates Basins'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SPK Basin Delineator'),
                action)
            self.iface.removeToolBarIcon(action)

    # # # # # # # # # # # # ######## ######## Pushbutton code ####### ######## # # # # # # # # # # # # 
    def select_output_file_1(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file ","", '*.tif')
        self.dlg.lineEdit_2.setText(filename)

    def select_output_file_2(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file ","", '*.tif')
        self.dlg.lineEdit_3.setText(filename)

    def select_output_file_3(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file ","", '*.tif')
        self.dlg.lineEdit_4.setText(filename)

    def select_output_file_4(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file ","", '*.sdat')
        self.dlg.lineEdit_5.setText(filename)

    def select_output_file_5(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file ","", '*.shp')
        self.dlg.lineEdit_6.setText(filename)
   ########################################################################################################



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = spkbasindelineatorDialog()
            self.dlg.pushButton_2.clicked.connect(self.select_output_file_1)
            self.dlg.pushButton_3.clicked.connect(self.select_output_file_2)
            self.dlg.pushButton_4.clicked.connect(self.select_output_file_3)
            self.dlg.pushButton_5.clicked.connect(self.select_output_file_4)
            self.dlg.pushButton_6.clicked.connect(self.select_output_file_5)

        ############# Fetch the currently loaded layers  ##########################
        layers = QgsProject.instance().layerTreeRoot().children() 
        layers_list = [layers]
        # Clear the contents of the comboBox from previous runs 
        self.dlg.mComboBox.clear() 
        # Populate the comboBox with names of all the loaded layers 
        self.dlg.mComboBox.addItems([layer.name() for layer in layers]) 
        ###########################################################################
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()


        # See if OK was pressed
        if result:
            # Merged DEM
            outputfile_1 = self.dlg.lineEdit_2.text()
            inputfile = self.dlg.mComboBox.checkedItems()
            processing.run("gdal:merge", {'INPUT':inputfile,
            'PCT':False,'SEPARATE':False,'NODATA_INPUT':None,'NODATA_OUTPUT':None,
            'OPTIONS':'','EXTRA':'','DATA_TYPE':5,
            'OUTPUT':outputfile_1})
            #self.dlg.progressBar.update(20)
            
            Rlayer_1 = self.iface.addRasterLayer(outputfile_1, '')
            # # # # Write code for importing recently created layers in layer panel # # # IMP IMP IMP

            # # # # # # # ##### #### Need to update the progress bar time to time #### ##### # # #  # IMP IMP IMP


            #Reprojection:
            self.dlg.mQgsProjectionSelectionWidget.setEnabled(True)
            TCRS = self.dlg.mQgsProjectionSelectionWidget.crs()
            outputfile_2 = self.dlg.lineEdit_3.text()
            processing.run("gdal:warpreproject", {'INPUT':outputfile_1,
            'SOURCE_CRS':QgsCoordinateReferenceSystem('EPSG:4326'),
            'TARGET_CRS':TCRS,
            'RESAMPLING':0,'NODATA':None,'TARGET_RESOLUTION':None,
            'OPTIONS':'','DATA_TYPE':0,'TARGET_EXTENT':None,'TARGET_EXTENT_CRS':None,
            'MULTITHREADING':False,'EXTRA':'',
            'OUTPUT':outputfile_2})
            #update progressBar 
            # add new layer in the layer panel
            Rlayer_2 = self.iface.addRasterLayer(outputfile_2, '')

            # Filled DEM by saga:
            #outputfile_3 = self.dlg.lineEdit_4.text()
            #processing.run("saga:fillsinkswangliu", {'ELEV':outputfile_2,
            #'MINSLOPE':0.01,'FILLED':outputfile_3,
            #'FDIR':'TEMPORARY_OUTPUT','WSHED':'TEMPORARY_OUTPUT'})
            #update progressBar
            # add new layer in the layer panel
            #Rlayer_3 = self.iface.addRasterLayer(outputfile_3, '')

            # Filled DEM by gdal
            outputfile_4 = self.dlg.lineEdit_4.text()
            processing.run("gdal:fillnodata", {'INPUT':outputfile_2,
            'BAND':1,'DISTANCE':10,'ITERATIONS':0,'NO_MASK':False,
            'MASK_LAYER':None,'OPTIONS':'','EXTRA':'',
            'OUTPUT':outputfile_4})

            #update progressBar
            # add new layer in the layer panel
            Rlayer_4 = self.iface.addRasterLayer(outputfile_4, '')

            # Basin Raster:
            outputfile_5 = self.dlg.lineEdit_5.text()
            intermediatefile = (tempfile.NamedTemporaryFile(suffix='.sdat')).name
            processing.run("saga:fillsinkswangliu", {'ELEV':outputfile_4,
            'MINSLOPE':0.01,'FILLED':'TEMPORARY_OUTPUT','FDIR':'TEMPORARY_OUTPUT',
            'WSHED':intermediatefile})

            processing.run("gdal:warpreproject", {'INPUT':intermediatefile,
            'SOURCE_CRS':None,'TARGET_CRS':TCRS,
            'RESAMPLING':0,'NODATA':None,'TARGET_RESOLUTION':None,'OPTIONS':'',
            'DATA_TYPE':0,'TARGET_EXTENT':None,'TARGET_EXTENT_CRS':None,'MULTITHREADING':False,'EXTRA':'',
            'OUTPUT':outputfile_5})
            # add new layer in the layer panel
            Rlayer_5 = self.iface.addRasterLayer(outputfile_5, '')

            #Basin vectorised:
            outputfile_6 = self.dlg.lineEdit_6.text()
            intermediatefile_1 = (tempfile.NamedTemporaryFile(suffix='.shp')).name
            processing.run("gdal:polygonize", {'INPUT':outputfile_5,
            'BAND':1,'FIELD':'DN','EIGHT_CONNECTEDNESS':False,'EXTRA':'',
            'OUTPUT':intermediatefile_1})
            processing.run("native:reprojectlayer", {'INPUT':intermediatefile_1,
            'TARGET_CRS':TCRS,
            'OPERATION':'+proj=pipeline +step +proj=unitconvert +xy_in=deg +xy_out=rad +step +proj=utm +zone=43 +ellps=WGS84',
            'OUTPUT':outputfile_6})
            #update progressBar
            # add new layer in the layer panel
            vlayer_6 = self.iface.addVectorLayer(outputfile_6, '', 'ogr')
